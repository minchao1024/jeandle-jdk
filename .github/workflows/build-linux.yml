#
# Copyright (c) 2022, 2023, Oracle and/or its affiliates. All rights reserved.
# Copyright (c) 2025, the Jeandle-JDK Authors. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'Build (linux)'

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      extra-conf-options:
        required: false
        type: string
      make-target:
        required: false
        type: string
        default: 'product-bundles test-bundles'
      debug-levels:
        required: false
        type: string
        default: '[ "debug", "release" ]'
      gcc-major-version:
        required: true
        type: string
      gcc-package-suffix:
        required: false
        type: string
        default: ''
      apt-architecture:
        required: false
        type: string
      apt-extra-packages:
        required: false
        type: string
      configure-arguments:
        required: false
        type: string
      make-arguments:
        required: false
        type: string
      runs-on:
        required: true
        type: string

jobs:
  build-linux:
    name: build
    runs-on: ${{ inputs.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        debug-level: ${{ fromJSON(inputs.debug-levels) }}
        include:
          - debug-level: debug
            flags: --with-debug-level=fastdebug
            suffix: -debug
            llvm-flags: '-DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON'
          - debug-level: release
            llvm-flags: '-DCMAKE_BUILD_TYPE=Release'

    steps:
      - name: 'Checkout the JDK source'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: 'Get the BootJDK'
        id: bootjdk
        uses: ./.github/actions/get-bootjdk
        with:
          platform: ${{ inputs.platform }}

      - name: 'Get JTReg'
        id: jtreg
        uses: ./.github/actions/get-jtreg

      - name: 'Get GTest'
        id: gtest
        uses: ./.github/actions/get-gtest

      - name: 'Set architecture'
        id: arch
        run: |
          # Set a proper suffix for packages if using a different architecture
          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then
            echo 'suffix=:${{ inputs.apt-architecture }}' >> $GITHUB_OUTPUT
          fi

      # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.
      - name: 'Install toolchain and dependencies'
        run: |
          # Install dependencies using apt-get
          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then
            sudo dpkg --add-architecture ${{ inputs.apt-architecture }}
          fi
          sudo apt-get update
          sudo apt-get install --only-upgrade apt
          sudo apt-get install gcc-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} g++-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} libxrandr-dev${{ steps.arch.outputs.suffix }} libxtst-dev${{ steps.arch.outputs.suffix }} libcups2-dev${{ steps.arch.outputs.suffix }} libasound2-dev${{ steps.arch.outputs.suffix }} ${{ inputs.apt-extra-packages }}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ inputs.gcc-major-version }} 100 --slave /usr/bin/g++ g++ /usr/bin/g++-${{ inputs.gcc-major-version }}

      - name: 'Build LLVM'
        run: |
          echo "github workspace: ${GITHUB_WORKSPACE}"
          # set CO_REPO and CO_BRANCH
          JDK_DIR=`pwd`
          TARGET_REPO=`git log -n 1 | grep "CO_REPO" | sed -E 's/^[[:space:]]*CO_REPO[[:space:]]*:[[:space:]]*(.*)$/\1/'`
          TARGET_BRANCH=`git log -n 1 | grep "CO_BRANCH" | sed -E 's/^[[:space:]]*CO_BRANCH[[:space:]]*:[[:space:]]*(.*)$/\1/'`

          if [ -z "${TARGET_REPO}" ]; then
            TARGET_REPO="https://github.com/jeandle/jeandle-llvm.git"
          fi
          echo "target repo of llvm: $TARGET_REPO"

          if [ -z "${TARGET_BRANCH}" ]; then
            TARGET_BRANCH="main"
          fi
          echo "target branch of llvm: $TARGET_BRANCH"

          # clone llvm
          pushd ../
          echo "Cloning jeandle-llvm: git clone -b ${TARGET_BRANCH} --depth=1 ${TARGET_REPO} jeandle-llvm..."
          git clone -b ${TARGET_BRANCH} --depth=1 ${TARGET_REPO} jeandle-llvm
          LLVM_DIR=`pwd`/jeandle-llvm

          if [[ "${{ inputs.platform }}" == "linux-aarch64" ]]; then
            LLVM_TARGET="AArch64"
          else
            LLVM_TARGET="X86"
          fi
          #build llvm
          pushd ${LLVM_DIR}
          mkdir build
          pushd build
          cmake -G "Unix Makefiles" -DLLVM_TARGETS_TO_BUILD=$LLVM_TARGET ${{ matrix.llvm-flags }} -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/install_llvm${{ matrix.suffix }}" -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_DYLIB_COMPONENTS=all ../llvm
          cmake --build . --target install -j $[$(nproc)/2]
          popd
          popd # enter to root dir of jeandle
          # delete llvm repo to spare space for building jdk.
          rm -rf jeandle-llvm/
          pushd $GITHUB_WORKSPACE
          tar czf install_llvm${{ matrix.suffix }}.tar.gz install_llvm${{ matrix.suffix }}/

      - name: 'Configure JDK'
        run: >
          git log -n 1 &&
          bash configure
          --with-conf-name=${{ inputs.platform }}
          ${{ matrix.flags }}
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}
          --with-jtreg=${{ steps.jtreg.outputs.path }}
          --with-gtest=${{ steps.gtest.outputs.path }}
          --with-zlib=system
          --with-jmod-compress=zip-1
          --with-jeandle-llvm=$GITHUB_WORKSPACE/install_llvm${{ matrix.suffix }}
          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (
          echo "Dumping config.log:" &&
          cat config.log &&
          exit 1)

      - name: 'Build JDK'
        id: build
        uses: ./.github/actions/do-build
        with:
          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

      - name: 'Upload bundles'
        uses: ./.github/actions/upload-bundles
        with:
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'
